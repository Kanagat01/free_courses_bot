from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from create_bot import dp, bot
from database import sqlite_db
from keyboards import admin_kb
from keyboards import kb_client
from dotenv import load_dotenv, find_dotenv
import os


load_dotenv(find_dotenv())
ID = os.getenv("ADMIN_ID")


class FSMAdmin(StatesGroup):
    photo = State()
    name = State()
    description = State()
    select_table = State()


# –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def make_changes_command(message: types.Message):
    if message.from_user.id == ID:
        await bot.send_message(message.from_user.id, '–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ /logout',
                               reply_markup=admin_kb.admin_kb)
        await message.delete()


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
async def cm_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.photo.set()
        await message.reply('–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ')


# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.reply('Ok')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
async def load_photo(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.reply('–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ')


# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async def load_description(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['description'] = message.text
    await FSMAdmin.next()
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', reply_markup=admin_kb.select_table)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
async def save_data(message: types.Message, state: FSMContext):
    await sqlite_db.sql_add_command(state, message.text)
    await state.finish()
    await message.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=admin_kb.admin_kb)

# ******************************–ö–æ–º–∞–Ω–¥–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å**********************************************


async def change_items(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_kb.select_table)


async def show_items(message: types.Message):
    pass

# ******************************–ö–æ–º–∞–Ω–¥–∞ –£–¥–∞–ª–∏—Ç—å**********************************************


# –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–∏—Ç—å
async def delete_command(message: types.Message):
    if message.from_user.id == ID:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_kb.select_table)


tableName = None


# –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
async def delete_item(message: types.Message):
    global tableName
    tableName = message.text

    read = await sqlite_db.sql_read2(tableName)
    for row in read:
        await bot.send_photo(message.from_user.id, row[0], f'{row[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[2]}')
        await bot.send_message(message.from_user.id, text="^^^",
                               reply_markup=admin_kb.get_delete_kb(row))


# –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
async def del_callback_run(callback_query: types.CallbackQuery):
    await sqlite_db.sql_delete_command(tableName, callback_query.data.replace("del ", ""))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞.',
                                show_alert=True)


# ******************************–ö–æ–º–∞–Ω–¥–∞ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞**********************************************

async def logout(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞", reply_markup=kb_client)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(make_changes_command, commands=['moderator'])
    dp.register_message_handler(
        cm_start, Text(equals='–ó–∞–≥—Ä—É–∑–∏—Ç—å', ignore_case=True), state=None)
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True),
                                state="*")
    dp.register_message_handler(load_photo, content_types=[
                                'photo'], state=FSMAdmin.photo)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(
        load_description, state=FSMAdmin.description)
    dp.register_message_handler(save_data, state=FSMAdmin.select_table)
    dp.register_message_handler(
        change_items, Text(equals='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', ignore_case=True))
    dp.register_message_handler(delete_command, Text(
        equals='–£–¥–∞–ª–∏—Ç—å', ignore_case=True))
    dp.register_message_handler(
        delete_item, Text(equals='–ö–Ω–∏–≥–∏üìö', ignore_case=True))
    dp.register_message_handler(delete_item, Text(
        equals='–ö—É—Ä—Å—ãüóÇ', ignore_case=True))
    dp.register_callback_query_handler(del_callback_run,
                                       lambda x: x.data and x.data.startswith('del '))
    dp.register_message_handler(logout, commands='logout')
